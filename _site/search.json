[
  {
    "objectID": "about/about.html",
    "href": "about/about.html",
    "title": "Chuck Horgan",
    "section": "",
    "text": "Hello!\nThis site is in active development. Until I get to the About page, I‚Äôm largely a Data Engineer.\nI‚Äôve developed (mostly) automated pipelines for getting unstructured data into databases, dashboards, and scheduled emails. While my most frequently utilized skills corroborate the traditional title, I like to think of myself as a Solution Engineer. ‚ÄúDo you think we could do this better?‚Äù and ‚ÄúIs that possible?‚Äù are questions that inspire obligatory, relentless Googling, trial and error, and additional tools in the solution toolbox. If you share the same passion, feel free to connect or reach out!"
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Welcome",
    "section": "",
    "text": "While I figure out what to put here, enjoy these pictures of my children üò∫\n\n\n\n\n\n\nCassidy\n\n\n\n\n\n\n\nCharlie"
  },
  {
    "objectID": "howto/git-with-a-network-folder-as-remote/index.html",
    "href": "howto/git-with-a-network-folder-as-remote/index.html",
    "title": "Git with a Network Folder as Remote",
    "section": "",
    "text": "Overview\nIf you do not have access to a dedicated Git server (usually hosts the GitLab/GitHub platforms), but still want to use Git for version control and collaboration, this page is for you! Most environments utilize a shared network drive, so you can use a folder on the drive as the remote ‚Äúserver‚Äù. This allows you to work locally, which is much faster in most cases. This setup is ideal for client environments without access to GitLab or GitHub.\n\n\nDefinitions\n\nRepository (more commonly, ‚Äúrepo‚Äù) - a central location for code, configuration files, and minor metadata.\nRemote - main repo, stored in a shared location. Usually a server, but will be a shared network folder for this purpose.\nLocal - copy of repo on user device. Cloned from the Remote repo.\nNetwork Copy - specific to this purpose. A copy of the Remote repo cloned to another shared network location.\n\n\n\nWorkflow Preview\n\nPerform all work on Local machine(s).\nPush/pull to Remote.\nWhen ready, open the Network Copy and pull. This is the ‚Äúlive‚Äù version of the projects. No editing is done here.\n\n\n\nRequirements\nWhile you can use the command line for all Git transactions, this page will use the terminal in RStudio. Furthermore, you can take advantage of the Git GUI within RStudio to visualize branches, commits, changes, etc. It‚Äôs like having GitLab/GitHub without the platform.\n\nGit Executable, for Windows\n\n\n\n\n\n\n\nNote\n\n\n\nYou do not need Admin rights to install.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLeave all options as default when installing.\n\n\n\nR/RStudio\nA shared network folder mapped to a drive letter.\nA basic understanding of Linux command line navigation.\n\nNote: throughout, [some text] means replace with case-specific things. Do not include the brackets.\n\n\nProcedure\n\nSet up.\n\n\nLaunch RStudio.\nEnsure any RStudio projects are closed.\nIf the Git executable was installed correctly, you should have the option to launch new Terminals with Git Bash. Go to Tools > Global Options, Terminal from the sidebar, and make sure ‚ÄúNew terminals open with:‚Äù Git Bash.\nLaunch two new terminals. It‚Äôs nice to have one for the network side and one for the local side.\n\n\nPrepare the local folder.\n\n\nCreate a folder where you want to work locally. I like to put local projects here, for example: C:\\Users\\[your username]\\Software\\GitLocal\\[your project name]. You can do this through the Windows explorer or at the command line.\nOpen the local terminal session.\nNavigate to the empty folder you just created. Initialize a new Git repository.\n\ncd [path to new folder as above]\ngit init\n\nPrepare the remote folder.\n\n\nCreate a folder for the remote repo. Keep in mind this will act as the ‚Äúserver‚Äù. You won‚Äôt be able to see files there, it will just act as the engine for cloning from, pushing to, and pulling from. I put it here, for example: [network drive letter]:\\[path to your network project folder]\\GitRemote\\[your project name]. Make sure it‚Äôs named the same as your local folder. You can do this through the Windows explorer or at the command line.\nOpen the network terminal session.\nNavigate to the empty folder you just created. Initialize a new, bare Git repository. Without a bare repo, you will get errors. I won‚Äôt pretend I know why. I learned through troubleshooting.\n\ncd [path to new folder as above]\ngit init --bare\n\nAdd files to local folder.\n\n\nCreate an RStudio project in the new local folder (do this in a different session so you don‚Äôt lose your terminals). If you already have an RStudio project, simply copy all of the files into the new local folder. The next time you open the RStudio project, it will automatically recognize the version control because of the .git folder within the local folder. Don‚Äôt worry about opening the project just yet.\nOpen the local terminal session. If you do git status, you should see all of the files you just created/copied.\nStage the files, commit them locally, add the remote folder origin, and push to the remote.\n\ngit add --all\ngit commit -m \"Initial commit\"\ngit remote add origin \"[full path to the remote folder]\"\ngit push origin master\n\nClone a copy to the shared network location.\n\n\nOpen remote terminal session. Navigate to a location that will house the production-ready versions of your projects. Clone from the remote ‚Äúserver‚Äù. It‚Äôs probably a good idea to make those folders read/execute only.\n\ncd [path to network location]\ngit clone \"[full path to the remote folder]\"\n\n\nCreating a New Project\n\nOpen network and local terminal sessions.\nWithin remote folder, create a folder for the new Git project.\nIn remote terminal session, navigate to the new folder; initialize the repo.\n\ncd [path to new folder]\ngit init --bare\n\nWithin Git local folder, create a folder of the same name for the new project.\nIn local terminal session, navigate to the new folder; initialize the repo.\n\ncd [path to new folder]\ngit init\n\nCreate a new RStudio project in a different RStudio session. Save it in the local new folder.\nIn local terminal session (within new folder), stage and commit files, add the remote folder origin, and push to the remote.\n\ngit add --all\ngit commit -m \"Initial commit\"\ngit remote add origin \"[full path to the remote folder]\"\ngit push origin master\n\n\nResources\n\nhttps://stackoverflow.com/questions/11635493/push-git-changes-to-a-shared-network-drive\nhttps://stackoverflow.com/questions/2199897/how-to-convert-a-normal-git-repository-to-a-bare-one"
  },
  {
    "objectID": "howto/howto.html",
    "href": "howto/howto.html",
    "title": "Chuck Horgan",
    "section": "",
    "text": "Git with a Network Folder as Remote\n\n\n\n\n\n\n\ngit\n\n\nR\n\n\nRStudio\n\n\nWindows\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nChuck Horgan\n\n\n4 min\n\n\n9/12/22, 9:31:19 PM\n\n\n\n\n\n\n\n\nPersonal Macro Workbook\n\n\n\n\n\n\n\nExcel\n\n\nVBA\n\n\nWindows\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nChuck Horgan\n\n\n1 min\n\n\n9/12/22, 7:18:03 PM\n\n\n\n\n\n\n\n\nRStudio Desktop on Ubuntu\n\n\n\n\n\n\n\nR\n\n\nRStudio\n\n\nUbuntu\n\n\nLinux\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nChuck Horgan\n\n\n1 min\n\n\n9/12/22, 7:18:03 PM\n\n\n\n\n\n\n\n\nWebEx Teams with GitLab\n\n\n\n\n\n\n\nGitLab\n\n\nWebEx\n\n\nProductivity\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nChuck Horgan\n\n\n1 min\n\n\n9/12/22, 7:18:03 PM\n\n\n\n\n\n\n\n\nX Window Setup on Ubuntu\n\n\n\n\n\n\n\nPuTTY\n\n\nLinux\n\n\nssh\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nChuck Horgan\n\n\n2 min\n\n\n9/12/22, 7:18:03 PM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "howto/personal-macro-workbook/index.html",
    "href": "howto/personal-macro-workbook/index.html",
    "title": "Personal Macro Workbook",
    "section": "",
    "text": "Overview\nSometimes we find we are copying modules between workbooks just to use a few macros in them. It may be more efficient to store your custom macros in one place. Note, however, that this may not be the best solution for collaboration. If another team member will be using the same macros upon opening the workbook, then it is not a good idea to store them in a personal location.\n\n\nProcess\n\nCreate the Personal workbook.\n\nOpen Developer tab.\nClick ‚ÄúRecord Macro‚Äù.\nDon‚Äôt worry about naming the macro; it will be temporary.\nIn ‚ÄúStore macro in‚Äù box, select ‚ÄúPersonal Macro Workbook‚Äù.\nClick ‚ÄúOK‚Äù.\n\nThe PERSONAL.xlsb file will now be created in the XLSTART folder.\nTo use common macros, copy them to modules within the PERSONAL.xlsb file. It will be launched each time Excel opens.\n\n\n\nSharing PERSONAL.xlsb files\n\nFind your XLSTART path.\n\nOpen Developer tab.\nClick on ‚ÄúVisual Basic‚Äù.\nHit Ctrl + g to bring up the Immediate window.\nType ? application.StartupPath and press enter.\n\nCopy other PERSONAL.xlsb files into that path, and they will be available for use the next time Excel is launched.\n\n\n\nResources\nhttps://www.techrepublic.com/blog/microsoft-office/quick-tip-find-excels-xlstart-folder-fast/\nhttps://support.microsoft.com/en-us/office/create-and-save-all-your-macros-in-a-single-workbook-66c97ab3-11c2-44db-b021-ae005a9bc790"
  },
  {
    "objectID": "howto/rstudio-desktop-on-ubuntu/index.html",
    "href": "howto/rstudio-desktop-on-ubuntu/index.html",
    "title": "RStudio Desktop on Ubuntu",
    "section": "",
    "text": "Install R\n\nThe main instructions are here, but I have summarized them for R 4.0 below.\nAdd entry to sources.list for R 4.0. Save and exit nano editor with C-s C-x.\n\nsudo nano /etc/apt/sources.list\n# add the following line to the end of the file\ndeb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/\n\nAdd the public key to the local keyfile. Without this step, you will get a ‚ÄúPUBLIC KEY NOT FOUND‚Äù error.\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\n\nInstall base R system. Check specific instructions to support multiple versions (if applicable).\n\nsudo apt-get update\nsudo apt-get install r-base\n\nInstall dev, needed for use of install.packages().\n\nsudo apt-get install r-base-dev\n\n\nInstall RStudio\n\nAgain, the main instructions are here (scroll down to ‚ÄúInstall for Debian 10 / Ubuntu 18 / Ubuntu 20‚Äù), but I have summarized them below.\nImport public code-signing key. As described here, this is necessary to install RStudio.\n\ngpg --keyserver keys.gnupg.net --recv-keys 3F32EE77E331692F\n\nDownload RStudio from the main download page with wget. Scroll down to ‚ÄúAll Installers‚Äù, find the ‚ÄúUbuntu 18/Debian 10‚Äù OS, right-click on the download file, and copy link address. As of November 2020, it is https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.3.1093-amd64.deb, so that is used in the following example.\n\ncd ~/Downloads\nwget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.3.1093-amd64.deb\n\nVerify key on download. It should say ‚ÄúGOODSIG‚Äù. Install the dpkg-sig package if necessary. As of November 2020, the installer file is rstudio-1.3.1093-amd64.deb, so that is used in the following example.\n\nsudo apt-get install dpkg-sig\ndpkg-sig --verify rstudio-1.3.1093-amd64.deb\n\nInstall RStudio.\n\n# assumes you are in Downloads/ folder\nsudo apt install ./rstudio-1.3.1093-amd64.deb\n\nLaunch with rstudio, or open in the ‚ÄúApplication Finder‚Äù!"
  },
  {
    "objectID": "howto/webex-teams-with-gitlab/index.html",
    "href": "howto/webex-teams-with-gitlab/index.html",
    "title": "WebEx Teams with GitLab",
    "section": "",
    "text": "Overview\nGitLab supports many integrations with other apps. One of the useful ones is WebEx Teams. Rather than messaging your team directly after changes have been pushed (or, forgetting to), you can configure the GitLab project to send selective notifications to the space of your choosing. For example:\n\n\n\nProcedure\nThe process to integrate is simple, and the documentation is clear. Note: Steps 1 and 2 must be completed by a WebEx administrator .\n\nOpen an incognito window in Chrome. The WebEx site was very unstable for me. It would timeout and not refresh properly. It may be an extension I have enabled or some caching issue. Either way, incognito windows worked best for me.\nGo to the WebEx App Hub. Log in to WebEx with the button in the top right. With the incognito window, you‚Äôll have to do this each time.\nSearch for ‚ÄúIncoming Webhooks‚Äù. It should pop up. Click on it. The green button should say ‚ÄúDisconnect‚Äù, because the app has already been connected by an administrator.\nScroll down to the bottom of the page. Select the desired space from the dropdown list. For GitLab, I just name them ‚ÄúGitLab‚Äù every time.\nClick Add. This is where I was timing out and experiencing weird behavior from the site. If it loads indefinitely, hard reload the page with Ctrl+Shift+R. It always worked eventually for me.\nCopy the webhook URL from the box.\nGo to the GitLab project that you want to receive notifications for. In the left sidebar, go to Settings > Integrations.\nScroll to the bottom of the page to find Webex Teams. Click on the name to go to the integration page.\nSelect the triggers that you wish to have in your WebEx space. I default to all and deselect them later if I want to. However, I do change the ‚ÄúBranches for which notifications are to be sent‚Äù option to ‚ÄúAll branches‚Äù.\nPaste the webhook URL copied from the WebEx app hub. Click Save changes, then Test settings. You should receive a notification in your WebEx space!"
  },
  {
    "objectID": "howto/x-window-setup-on-ubuntu/index.html",
    "href": "howto/x-window-setup-on-ubuntu/index.html",
    "title": "X Window Setup on Ubuntu",
    "section": "",
    "text": "Overview\nPuTTY is great as an ssh client, and allows you to do anything while connected to the server. However, the colors are difficult to configure, and having a desktop environment set up can be beneficial in a variety of ways. With this set up, you will be able to open the Remote Desktop Connection feature on a Windows machine, and connect to an Ubuntu server, just like you would with a remote Windows machine.\nNote: you will need sudo privileges.\nThere are two main steps:\n\nInstall and configure a remote desktop protocol (RDP)\nInstall and configure a desktop environment (see examples here)\n\n\n\nProcedure\nFollow instructions on this article, under ‚ÄúUsing Xrdp - Ubuntu Remote Desktop Server‚Äù. I will summarize them below. Note: I also added/edited a few things after the main process did not work. I listed those at the end, under Troubleshooting.\n\nUpdate packages\n\nsudo apt-get update\n\nInstall xrdp, an implementation of Microsoft RDP that uses the X Window system.\n\nsudo apt-get install xrdp\n\nInstall xfce4, the desktop environment that works best with xrdp.\n\nsudo apt-get install xfce4\n\nConfigure xrdp server to use xfce as the default graphical environment. The following command writes a string, ‚Äúxfce4-session‚Äù into a new file, ‚Äú.xsession‚Äù, and puts the file into the user‚Äôs home directory.\n\necho xfce4-session > ~/.xsession\n\nStart xrdp on session startup, and restart xrdp service to enact changes.\n\nsudo systemctl enable xrdp\nsudo service xrdp restart\n\nCopy default shell script needed to start xrdp and then clear it.\n\nsudo cp /etc/xrdp/startwm.sh /etc/xrdp/startwm.sh1\nsudo sh -c 'cat /dev/null > /etc/xrdp/startwm.sh'\n\nEdit the startup script with sudo nano /etc/xrdp/startwm.sh. Once in the nano editor, it should be exactly as follows, with one empty line at the end of the script.\n\n#!/bin/sh\n\nunset DBUS_SESSION_BUS_ADDRESS\nunset XDG_RUNTIME_DIR\n. $HOME/.profile\n\nif [ -r /etc/default/locale ]; then\n  . /etc/default/locale\n  export LANG LANGUAGE\nfi\n\nstartxfce4\nSave the script with C-s and then exit with C-x.\n\nSet the XDG_CONFIG_DIRS environment variable.\n\nexport XDG_CONFIG_DIRS=/etc/xdg\n\nRestart the xrdp service again.\n\nsudo service xrdp restart\n\nCheck the IP address of your Ubuntu server with ifconfig. Write it down somewhere. It will be the ‚Äúens‚Äù one.\nOpen the Remote Desktop Connection service on your Windows machine. Enter the IP address that you saved in step 10. Select Xorg from the dropdown, and enter your credentials for the Ubuntu server.\n\nYou now have a desktop interface to your Ubuntu server! Open a terminal with the terminal icon, and it is just like being ssh‚Äôd in with PuTTY. You can also open as many terminals as you want, which is nice. Another nice feature is copy/paste with right click.\n\n\nTroubleshooting\n\nSetting the XDG_CONFIG_DIRS variable. This was not set by default for me, and I think this is the most important fix.\nUnsetting environment variables in the startup script for xrdp. Not sure if this affected anything, but it works like this.\nInstalling xorgxrdp-hwe-18.04. Pretty sure this was not the error as there were no errors with installation of xrdp, but it worked with this package installed."
  },
  {
    "objectID": "snippets/common-git-commands/common-git-commands.html",
    "href": "snippets/common-git-commands/common-git-commands.html",
    "title": "Common Git Commands",
    "section": "",
    "text": "Why?\nCommand-line git continuously proves to be needed just infrequently enough to elude memory. Every time I go to create a new local/remote branch, merge a specific way, or rollback a commit, I end up Googling, ‚Äúgit ‚Ä¶‚Äù I decided to create this page so I could consolidate all of those common commands to a single bookmark. Eventually, I‚Äôll remember more than git reset --hard.\n\n\n\n\n\n\nWarning\n\n\n\nHard resetting is not a good practice unless you know what you‚Äôre doing üôÉ\n\n\n\n\nGit Summary\nIf you are unfamiliar with a git workflow, the commands below will make more sense in this context:\n\n\n\nWorkflow\n\n\nFurthermore, terminology matters! Let‚Äôs define some terms for the common commands below.\n\n\n\n\n\n\n\nWorkspace\nThe folder on your computer. Where you open files, make changes, and save changes.\n\n\nIndex\nThe staging area between your Workspace and Local repo.\n\n\nLocal (Repository)\nRecord of commits, specific to you, on your computer.\n\n\nRemote (Repository)\nRecord of commits, for every member of the project, usually stored on a server. Accessible by all members in some way. On-premise server or cloud-based. Can even be a shared network folder.\n\n\n\nThe following commands cover a lot of the steps above.\n\nlocal branchesremote branchesmergingreverting\n\n\n# list branches\ngit branch -a\n\n# create a new local branch and switch to new branch\n# (with \"develop\" as new branch name\")\ngit checkout -b develop\n\n# delete local branch\n# (with \"develop\" as branch to delete)\ngit branch -d develop\n\n# rename a branch\n# (from master to main)\ngit branch -m master main\n\n# delete local branches that are not on the remote anymore\ngit remote prune origin\n\n# rebase feature branch with changes made to develop branch\n# (with \"feature_branch\" as name of feature and \"develop\" as name of develop)\ngit checkout feature_branch\ngit rebase develop\n\n\n# show origin\ngit remote -v\n\n# show details about branch status\ngit remote -vv\n\n# create new remote branch from local\n# (with \"develop\" as local branch name)\ngit push -u origin develop\n\n# the -u above is important; it means \"upstream\"\n# it ensures the local branch is set up to track the remote branch from \"origin\"\n# if you forget the -u, you will need to set it up manually\n# like this (with \"develop\" as the branch name)\ngit branch -u origin/develop\n\n# delete remote branch\n# (with \"develop\" as branch to delete)\ngit push origin --delete develop\n\n# if you get an error failing to push some refs, that's because the local branch\n#   you deleted was not pushed to the remote\n# the following line will delete that branch from your refs folder\n# (refs are located at \"~/.git/refs/...\")\ngit update-ref -d refs/remotes/origin/dev\n# THEN, you must delete the branch on the remote with the same push as above\ngit push origin --delete dev\n# otherwise, the next time you pull, the ref will be added again from the remote\n\n# set the HEAD\ngit remote set-head origin -a\n\n\n# stash Workspace changes, pull remote changes, merge Workspace changes\ngit stash\ngit pull\ngit stash pop\n\n# prioritize the feature branch during a merge to develop\ngit checkout develop\ngit merge -s ort -Xtheirs feature-module-rewrite2\n\n\n\n\n\n\n\n\nDanger Zone\n\n\n\nProceed with caution. Work may be lost if executed incorrectly.\n\n\n# reset Workspace changes (e.g., before commits)\n# this reverts all unpushed changes to the last commit from the remote branch\ngit reset --hard\n\n# reset Workspace changes back a number of commits\n# (here, just 1, and before any commits to Local)\ngit reset --hard HEAD~1\n\n\n\n\n\nResources\nMerge Strategies"
  },
  {
    "objectID": "snippets/rstudio-shortcuts-without-addins/rstudio-shortcuts-without-addins.html",
    "href": "snippets/rstudio-shortcuts-without-addins/rstudio-shortcuts-without-addins.html",
    "title": "RStudio Shortcuts without Addins",
    "section": "",
    "text": "If you want to bind common code to a hotkey, consider using the shrtcts package! It‚Äôs a lot easier to set up than writing your own RStudio addin.\n\nSteps\n\nInstall shrtcts with remotes::install_github(\"gadenbuie/shrtcts\").\nCreate a new R script using the example below. The format is title, description, hotkey, and code to execute inside the function. Save it as .shrtcts.R in your R home directory (find your R home with path.expand(\"~\")).\n\n\n\n.shrtcts.R\n\n#' Write the clipboard into a dataframe\n#'\n#' This is useful for copying a range in Excel and quickly creating a dataframe,\n#' named \"df\".\n#'\n#' @interactive\n#' @shortcut Ctrl+Alt+V\nfunction() {\n  assign(\"df_clipboard\",\n         read.table(\"clipboard\", sep = \"\\t\", header = TRUE),\n         envir = .GlobalEnv)\n}\n\n\n\n\n\n\n\nTip\n\n\n\nCheck your existing keyboard shortcuts with Tools > Modify Keyboard Shortcuts to avoid binding conflicts. In my example, I unbound the default for Ctrl+Alt+V first because I never use it. It is easier to find the keys used by sorting on the Shortcut column in the window (click it).\n\n\n\nEdit your .Rprofile with usethis::edit_r_profile().\nPaste the exact code below. If you have other things in your .Rprofile, add it to the end. Save the file and close it.\n\n\n\n.Rprofile\n\n# ~/.Rprofile\nif (interactive() && requireNamespace(\"shrtcts\", quietly = TRUE)) {\n  shrtcts::add_rstudio_shortcuts(set_keyboard_shortcuts = TRUE)\n}\n\n\nClose all sessions of RStudio.\nReopen RStudio to test.\n\n\n\nReference\nhttps://github.com/gadenbuie/shrtcts)"
  },
  {
    "objectID": "snippets/snippets.html",
    "href": "snippets/snippets.html",
    "title": "Chuck Horgan",
    "section": "",
    "text": "Common Git Commands\n\n\n\n\n\n\n\nGit\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2022\n\n\nChuck Horgan\n\n\n5 min\n\n\n9/13/22, 8:09:48 AM\n\n\n\n\n\n\n\n\nRStudio Shortcuts without Addins\n\n\n\n\n\n\n\nRstudio\n\n\nR\n\n\nProductivity\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2022\n\n\nChuck Horgan\n\n\n1 min\n\n\n9/13/22, 8:27:19 AM\n\n\n\n\n\n\nNo matching items"
  }
]